#!/bin/bash
# 2021.06.20

# Usage: orgbusy [file.org]
# or
# Usage: orgbusy [delay no of days] [file.org]
# Tells your average workload (hrs/days) to fulfill deadlines. Should do about it above "leaveit", and should panic above "panic".
# "leaveit" and "panic" can be given in ~/.orgbusy/[file.oby] in the format
# "leaveit=1.3"
# "panic=4"
# (in separate lines). If no such file, defaults are 1.3 for leaveit and 4 for panic. (leavit<=panic/3 means peaceful weekends. :-) )
# The optional delay argument projects that many days into the future assuming no work is done by then.
# Format of the .org file: 
# ** <2014-06-05 Thu> Stuff			  :1:
# that is:
# [anything but "<" here] <date> Stuff :[number of hrs required]:
# number of hrs required can be any positive integer. It can also be 0, in which case "Stuff" is considered a full day programme that takes the given day out of those available for work (e.g., a conference or a family trip)
# Weekends are not taken out but I guess could be treated easily.
# Added hrut integration on [2021-06-20 Sun]. Orgbusy is a long task so deserves its own hrut file.


re='^[0-9]+$'
real='^[0-9]+([.][0-9]+)?$'
if [ $# == 1 ] ; then
 filenor="$1"
 dela=0
elif [[ $# == 2 ]] && [[ $1 =~ $re ]] ; then
 filenor="$2"
 dela=$1
else
 echo "Usage: orgbusy [filename] or orgbusy [delay] [filename]"
 exit
fi

ffront=${filenor%.*}
file=$ffront.org
obyfile="$HOME/.orgbusy/$ffront.oby"
obymofile="$HOME"/.orgbusy/"$ffront"_mo.moby
obygnuf="$HOME"/.orgbusy/"$ffront"_gnu.goby
hrutfile="$HOME"/.hrut/"$ffront".pkl

# Create dir of none
if [ ! -d "$HOME/.orgbusy" ]; then
 mkdir ~/.orgbusy
fi

if [ ! -f $file ] ; then
 echo "Can't find the file $file."
 exit
fi

if [ -f $obyfile ] ; then
 leaveit=`cat $obyfile | awk -F\= '/^leaveit/ { print $2 }'`
# echo "$leaveit"
 panic=`cat $obyfile | awk -F\= '/^panic/ { print $2 }'`
# echo "$panic"
 if [[ ! $leaveit =~ $real ]] || [[ ! $panic =~ $real ]] ; then
  echo "The file $obyfile is not in the right format."
  exit
 fi
else
 leaveit=1.3
 panic=4
fi

# Read morning value, if it's from today, otherwise "-1"
if [[ -f "$obymofile" && ! `find "$obymofile" -daystart -mtime +0` ]] ; then
 movalue=`cat $obymofile`
else
 movalue="-1"
fi

# Read hrut if exists. We need hrut with the same filename. We work in percents as units. -1 means no hrut to be used.
if [[ -f "$hrutfile" ]] && [[ "$dela" == "0" ]]
then
 hrutval=$(hrut $ffront)
 if [[ ! $hrutval =~ $re ]]
 then
  hrutval="-1"
 fi
else
 hrutval="-1"
fi

cat $file |

awk -F\: ' 
{
 if ((NF > 1) && ($(NF-1) + 0 == $(NF-1)) && ($NF == "")) {
  printf($1)
  for (i=2; i<NF; i+=1) printf(":"$i);
  print(":"$NF)
 };
}' |

sort -r |

tee /dev/tty |

sort |

awk -F\: ' 
{
 printf($1)
 for (i=2; i<=NF; i+=1) printf(":"$i);
 print(";"$(NF-1))
}' |

awk -F\< '
{
 year=substr($2,1,4)
 mo=substr($2,6,2)
 day=substr($2,9,2)
# print("year="year" month="mo" day="day";"$0)
# dayno=(year-2013)*365+mo*30+day
 if ((year % 4 == 0) && (year % 100 != 0)) leapy=1
 else leapy=0;
 if (mo == "01") mod=0;
 if (mo == "02") mod=31;
 if (mo == "03") mod=59+leapy;
 if (mo == "04") mod=90+leapy;
 if (mo == "05") mod=120+leapy;
 if (mo == "06") mod=151+leapy;
 if (mo == "07") mod=181+leapy;
 if (mo == "08") mod=212+leapy;
 if (mo == "09") mod=243+leapy;
 if (mo == "10") mod=273+leapy;
 if (mo == "11") mod=304+leapy;
 if (mo == "12") mod=334+leapy;
 dayno=mod+day
 for (i=2012; i<year; i+=1) {
  if ((i % 4 == 0) && (i % 100 != 0)) dayno=dayno+366
  else dayno=dayno+365
 }

 print(dayno";"$0)
}' |

awk -F\; -v tyear="$(date +"%Y")" -v tmo="$(date +"%m")" -v tday="$(date +"%d")" -v dela="$dela" -v panic="$panic" -v leaveit="$leaveit" -v movalue="$movalue" -v obymofile="$obymofile" -v obygnuf="$obygnuf" -v hrutval="$hrutval" ' BEGIN {
# tyear=strftime("%Y")
# tmo=strftime("%m")
# tday=strftime("%d")
 #print(tyear", "tmo", "tday)
 #tdayno=(tyear-2013)*365+tmo*30+tday
 if ((tyear % 4 == 0) && (tyear % 100 != 0)) tleapy=1
 else tleapy=0;
 if (tmo == 1) tmod=0;
 if (tmo == 2) tmod=31;
 if (tmo == 3) tmod=59+tleapy;
 if (tmo == 4) tmod=90+tleapy;
 if (tmo == 5) tmod=120+tleapy;
 if (tmo == 6) tmod=151+tleapy;
 if (tmo == 7) tmod=181+tleapy;
 if (tmo == 8) tmod=212+tleapy;
 if (tmo == 9) tmod=243+tleapy;
 if (tmo == 10) tmod=273+tleapy;
 if (tmo == 11) tmod=304+tleapy;
 if (tmo == 12) tmod=334+tleapy;
 tdayno=tmod+tday
 for (i=2012; i<tyear; i+=1) {
  if ((i % 4 == 0) && (i % 100 != 0)) tdayno=tdayno+366
  else tdayno=tdayno+365
 }
 tdayno=tdayno+dela
# print(tdayno)
 maxdays=-1

 print("")
}
{
# Collect daily charge function p(days from today)

# The day from today distance
 dayft=$1-tdayno

# Set the max distance looking into future, set zeros for dummy days
 if (maxdays < dayft) {
  for (i=maxdays+1; i<=dayft; i+=1) {
   dummydays[i]=0;
  }
  maxdays=dayft;
 }

# Collect dummy days (those with 0)
 if ($NF == 0) dummydays[dayft]=1;

# Add the entry charge to the given day

 if ($NF+0==$NF) {
  if ((p[dayft]+0==p[dayft]) && (p[dayft]>0)) p[dayft]=p[dayft]+$NF;
  else p[dayft]=$NF;
 }
 #for (i=2; i<=NF-2; i+=1) printf($i";");
 #print($(NF-1))
}
END{
 print("")
## For now just print p
#for (i=0; i<=maxdays; i+=1) {
# printf(p[i]", ")
#}
#print("")

p[-1]=0
# Now repack tasks from dummy days; p[-1] is the overflow if today is dummy and first dummy sequence has tasks.
 for (i=maxdays; i>=0; i-=1) {
  if (dummydays[i] == 1) {
   p[i-1]=p[i-1]+p[i]
   p[i]=0
  }
 }
## For now just print p
#for (i=-1; i<=maxdays; i+=1) {
# printf(p[i]", ")
#}
#print("")

# Now collapse dummy days in p[.] to get q[.]

 dtime=-1
 tmpmaxd=maxdays
 for (i=0; i<=tmpmaxd; i+=1) {
  if (dummydays[i] == 0) {
   dtime=dtime+1
   q[dtime]=p[i]
  }
  else {
   maxdays=maxdays-1
  }
 }

# Maybe some stuff is left in the first dummy sequence. Dont forget about it

 q[0]=q[0]+p[-1]

## For now just print q
#for (i=0; i<=maxdays; i+=1) {
# printf(q[i]", ")
#}
#print("")

###
#MORNING
###

# Compute the cumulative charge function F(days from today)
 for (i=0; i<=maxdays; i+=1) {
  F[i]=0
  for (j=0; j<=i; j+=1) F[i]=F[i]+q[j];
 }

## For now just print F
#for (i=0; i<=maxdays; i+=1) {
# printf(F[i]", ")
#}
#print("")

# Put concave bound on F. First a pointer to see where the critical points are.
# The origin is not necessarily critical: add imaginary point
 pointer[0]=-1
 F[-1]=0

# This will show where the max of the pointer is right now
 cvxday=-1

# This will show how many points we have in the cvx stuff
 cvxc=0

 while (cvxday<maxdays) {
# Max slope into the future
  maxslp=0
  cvxc=cvxc+1
# Look at all future days
  for (i=cvxday+1; i<=maxdays; i+=1) {
   currslp=(F[i]-F[cvxday])/(i-cvxday);
   if (currslp>=maxslp){
    pointer[cvxc]=i
    maxslp=currslp
   }
  }
  cvxday=pointer[cvxc]
 }

## Print the pointer
#for (i=0; i<=cvxc; i+=1) printf("no: %4.4f, day: %4.4f\n",i,pointer[i])

# Print the slopes
 printf("Future: ")
 for (i=0; i<=maxdays; i+=1) {
# Find the pointer values around on our left
  for (j=1; j<=cvxc; j+=1) {
   if ((pointer[j-1]<i) && (pointer[j]>=i)) poicurr=j
  }
  ch=(F[pointer[poicurr-1]]-F[pointer[poicurr]])/(pointer[poicurr-1]-pointer[poicurr])
  printf("%6.2f",ch)
 }
 print("")
 print("")

 printf("Due today:	%6.2f hours.\n",F[0]);
 ch=F[pointer[1]]/(pointer[1]+1);

# Save the morning value, if needed

 if (dela == 0){
  if (movalue == -1){
   movalue=ch
   printf "%6.2f",movalue > obymofile
  }
  printf("Morning was:	%6.2f hours/day.\n",movalue);
 }

# Add hrut correction
 if (hrutval != -1){
  if (movalue > F[0]){
   hrutch=movalue*hrutval/100
  }
  else{
   hrutch=F[0]*hrutval/100
  }
  if (hrutch < F[0]){
   hrutch=F[0]
  }
  printf("WITH HRUT:	%6.2f HOURS FOR TODAY.\n",hrutch);
 }

 printf("Now:		%6.2f hours/day.\n",ch);

# Print to file for Gnuplot purposes
 for (i=-1; i<=maxdays; i+=1) {
  ptr=0
  for (j=0; j<=cvxc; j+=1) {
   if (pointer[j]==i) {
    ptr=1
   }
  }
  if (ptr==1) {
   printf "%6.2f	%6.2f	%6.2f\n",i,F[i],F[i] > obygnuf
  }
  else {
   printf "%6.2f	%6.2f\n",i,F[i] > obygnuf
  }
 }

###
#Evening: tdayno, dayft, maxdays, and the argument of q[.] has to be decreased by one. Plus dont make panic.
###

# Compute the cumulative charge function Fe(days from today)
 for (i=0; i<=maxdays-1; i+=1) {
  Fe[i]=0
  for (j=0; j<=i; j+=1) Fe[i]=Fe[i]+q[j+1];
 }

## For now just print Fe
#for (i=0; i<=maxdays-1; i+=1) {
# printf(Fe[i]", ")
#}
#print("")

# Put concave bound on F. First a pointer to see where the critical points are.
# The origin is not necessarily critical: add imaginary point
 pointere[0]=-1
 Fe[-1]=0

# This will show where the max of the pointer is right now
 cvxdaye=-1

# This will show how many points we have in the cvx stuff
 cvxce=0

 while (cvxdaye<maxdays-1) {
# Max slope into the future
  maxslpe=0
  cvxce=cvxce+1
# Look at all future days
  for (i=cvxdaye+1; i<=maxdays-1; i+=1) {
   currslpe=(Fe[i]-Fe[cvxdaye])/(i-cvxdaye);
   if (currslpe>=maxslpe){
    pointere[cvxce]=i
    maxslpe=currslpe
   }
  }
  cvxdaye=pointere[cvxce]
 }

## Print the pointer
#for (i=0; i<=cvxce; i+=1) printf("no: %4.4f, day: %4.4f\n",i,pointere[i])

# Find the slopes
 for (i=0; i<=maxdays-1; i+=1) {
# Find the pointer values around on our left
  for (j=1; j<=cvxce; j+=1) {
   if ((pointere[j-1]<i) && (pointere[j]>=i)) poicurre=j
  }
  che=(Fe[pointere[poicurre-1]]-Fe[pointere[poicurre]])/(pointere[poicurre-1]-pointere[poicurre])
 }

 che=Fe[pointere[1]]/(pointere[1]+1);
# Since above 4 could easily lead to 8 tomorrow if not done...
 printf("Evening:	%6.2f hours/day.\n",che);

###
#Decide upon panic
###

 if (dela==0){

# Take the max of the morning and evening charges
  chm=che
  if (ch>che) chm=ch;

# Take the panic threshold: max of panic and movalue
  panict=panic
  if (movalue>panic) panict=movalue;

# Panic if:
# - today is dummy but sg is overdue (in p[-1]), or
# - today is not dummy and sg is due today or charge is over the panic threshold.
  if (((dummydays[0]==0) && ((chm > panict) || (F[0] > 0))) || (p[-1]>0)) printf("PANIC!!\n");
  else if (chm < leaveit) printf("Don\x27t worry about deadline stuff.\n");
  else printf("Do deadline stuff.\n");
 }

###
# Keep calm if today is dummy
###
 if (dummydays[0]==1) printf("Today is a dummy day.");

 print("")

}'

command -v gnuplot > /dev/null 2>&1
if [ "$?" -ne "0" ]; then
 echo "If I had gnuplot I would show you a nice plot now."
else
gnuplot -persist <<EOF
plot "$obygnuf" using 1:2 with boxes notitle, "$obygnuf" using 1:3 with lines notitle
EOF
fi
